import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './AdminDashboard.css';

function AdminDashboard() {
    const [users, setUsers] = useState([]);
    const [routes, setRoutes] = useState([]);
    const [showModal, setShowModal] = useState(false);

    useEffect(() => {
        fetchUsers();
        fetchRoutes();
    }, []);

    const fetchUsers = async () => {
        try {
            const res = await axios.get('http://localhost:5000/api/admin/users');
            setUsers(res.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        }
    };

    const fetchRoutes = async () => {
        try {
            const res = await axios.get('http://localhost:5000/api/routes');
            setRoutes(res.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
        }
    };

    const handleDeleteUser = async (userId) => {
        if (window.confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            try {
                await axios.delete(`http://localhost:5000/api/user/${userId}`);
                fetchUsers();
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            }
        }
    };

    const handleDeleteRoute = async (routeId) => {
        if (window.confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?')) {
            try {
                await axios.delete(`http://localhost:5000/api/routes/${routeId}`);
                fetchRoutes();
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', err);
            }
        }
    };

    const translateType = (type) => {
        switch (type) {
            case 'nature': return '–ü—Ä–∏—Ä–æ–¥–∞';
            case 'city': return '–ì–æ—Ä–æ–¥';
            case 'shopping': return '–®–æ–ø–ø–∏–Ω–≥';
            case 'culture': return '–ö—É–ª—å—Ç—É—Ä–∞';
            default: return type;
        }
    };

    return (
        <div className="admin-dashboard">
            <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>

            <section>
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–ò–º—è</th>
                            <th>Email</th>
                            <th>–ì–æ—Ä–æ–¥</th>
                            <th>–£–¥–∞–ª–∏—Ç—å</th>
                        </tr>
                    </thead>
                    <tbody>
                        {users.map(u => (
                            <tr key={u.User_id}>
                                <td>{u.User_id}</td>
                                <td>{u.First_name} {u.Last_name}</td>
                                <td>{u.Email}</td>
                                <td>{u.City}</td>
                                <td>
                                    <button onClick={() => handleDeleteUser(u.User_id)}>üóëÔ∏è</button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>

            <section>
                <h3>–ú–∞—Ä—à—Ä—É—Ç—ã</h3>
                <button onClick={() => alert('–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')}>
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </button>

                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                            <th>–¶–µ–Ω–∞</th>
                            <th>–¢–∏–ø</th>
                            <th>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</th>
                            <th>–£–¥–∞–ª–∏—Ç—å</th>
                            <th>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</th>
                        </tr>
                    </thead>
                    <tbody>
                        {routes.map(route => (
                            <tr key={route.Route_id}>
                                <td>{route.Route_id}</td>
                                <td>{route.Description.slice(0, 50)}...</td>
                                <td>{route.Cost} ‚ÇΩ</td>
                                <td>{translateType(route.Travel_type)}</td>
                                <td><button onClick={() => alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}>‚úèÔ∏è</button></td>
                                <td><button onClick={() => handleDeleteRoute(route.Route_id)}>üóëÔ∏è</button></td>
                                <td><button onClick={() => setShowModal(true)}>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button></td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>

            {showModal && (
                <div className="modal-overlay">
                    <div className="modal">
                        <p>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–æ)</p>
                        <button onClick={() => setShowModal(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default AdminDashboard;
