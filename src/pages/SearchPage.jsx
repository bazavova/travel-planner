import React from 'react';
import './SearchPage.css';
import { useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';
import axios from 'axios';

function SearchPage() {
  const location = useLocation();
  const [routes, setRoutes] = useState([]);

  const params = new URLSearchParams(location.search);
  const destination = (params.get('destination') || '').trim().toLowerCase();
  const budget = parseFloat(params.get('budget')) || 0;
  const travelType = params.get('travelType') || '';
  const language = params.get('language') || '';
  const guideRequired = params.get('guideRequired') === 'true';

  useEffect(() => {
    axios.get('http://localhost:5000/api/routes')
      .then(res => {
        const filtered = res.data.filter(route => {
          return (
            (!destination || route.Destination.toLowerCase().includes(destination)) &&
            (!budget || parseFloat(route.Cost) <= budget) &&
            (!travelType || route.Travel_type === travelType) &&
            (!language || route.Language === language) &&
            (!guideRequired || route.Guide_required)
          );
        });
        setRoutes(filtered);
      })
      .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤', err));
  }, [destination, budget, travelType, language, guideRequired]);

  const translateType = type => {
    const map = {
      nature: '–ü—Ä–∏—Ä–æ–¥–∞',
      city: '–ì–æ—Ä–æ–¥',
      shopping: '–®–æ–ø–ø–∏–Ω–≥',
      culture: '–ö—É–ª—å—Ç—É—Ä–∞'
    };
    return map[type] || type;
  };

  const translateLang = lang => {
    const map = {
      ru: '–†—É—Å—Å–∫–∏–π',
      en: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
    };
    return map[lang] || lang;
  };

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU');
  };

  const handleBook = async (route) => {
    const user = JSON.parse(localStorage.getItem('user'));
    const payload = {
      destination: route.Destination,
      startDate: route.Start_date,
      endDate: route.End_date,
      cost: parseFloat(route.Cost),
      guideRequired: route.Guide_required,
      userId: user?.User_id,
      guideId: 1,
      travelType: route.Travel_type,
      language: route.Language,
    };

    try {
      await axios.post('http://localhost:5000/api/trips', payload);
      alert('–ú–∞—Ä—à—Ä—É—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ü–æ–µ–∑–¥–∫–∏"');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', err);
    }
  };

  return (
    <div className="search-page">
      <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
      <div className="route-list">
        {routes.map(route => (
          <div key={route.Route_id} className="route-card">
            <h3>{route.Destination}</h3>
            <p><strong>üìÖ –î–∞—Ç—ã:</strong> {formatDate(route.Start_date)} ‚Äî {formatDate(route.End_date)}</p>
            <p><strong>üí∞ –ë—é–¥–∂–µ—Ç:</strong> {parseFloat(route.Cost).toFixed(2)} ‚ÇΩ</p>
            <p><strong>üß≠ –¢–∏–ø:</strong> {translateType(route.Travel_type)}</p>
            <p><strong>üåê –Ø–∑—ã–∫:</strong> {translateLang(route.Language)}</p>
            <p><strong>üßë‚Äçüè´ –ì–∏–¥:</strong> {route.Guide_required ? '–î–∞' : '–ù–µ—Ç'}</p>
            <button onClick={() => handleBook(route)}>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
          </div>
        ))}
      </div>
    </div>
  );
}

export default SearchPage;
